import normalizeUrl from 'normalize-url';

let regUrl = /([a-zA-Z]+):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-/]))?/
let mongoose: any;

function validateUrl (val: any, options: any) {
  var required = (typeof options.required === 'function') ? options.required() : options.required
  if ((!val || val === '') && !required) {
    return true
  }
  return regUrl.test(val)
}

function Url (path: any, options: any) {
  
  this.options = options
  this.path = path
  mongoose.SchemaTypes.String.call(this, path, options)
  this.validate(function (val: any) { return validateUrl(val, options) }, options.message || Url.defaults.message || 'url is invalid')
}

Url.defaults = { message: "" };

Object.setPrototypeOf(Url.prototype, mongoose.SchemaTypes.String.prototype)

Url.prototype.cast = function (val: any) {
  return val !== '' ? normalizeUrl(val) : ''
}

Url.prototype.get = function (val: any) {
  return val !== '' ? normalizeUrl(val) : ''
}

Url.prototype.checkRequired = function (val: any) {
  return typeof val === 'string' && validateUrl(val, this.options)
}

export function MongooseUrl(myMongoose: any) {
    mongoose = myMongoose;
    Object.defineProperty(mongoose.SchemaTypes, 'Url', Url);
    Object.defineProperty(mongoose.Types, 'Url', String);
}